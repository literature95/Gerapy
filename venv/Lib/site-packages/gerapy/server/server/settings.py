"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 1.11.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os  # 导入 os 模块，用于处理文件和目录路径

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))  # 获取项目的根目录

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'n8e-!s(t4$n!l_j$o!9ey7es@25+=o-()38viz$pb(!djhxe2_'  # 项目的密钥，必须保密

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('APP_DEBUG', True)  # 调试模式，开发环境为 True，生产环境应为 False

ALLOWED_HOSTS = ['*']  # 允许访问的主机列表，'*' 表示允许所有主机

# Application definition

INSTALLED_APPS = [  # 已安装的应用列表
    'django.contrib.admin',  # Django 管理后台
    'django.contrib.auth',  # 用户认证
    'django.contrib.contenttypes',  # 内容类型框架
    'django.contrib.sessions',  # 会话框架
    'django.contrib.messages',  # 消息框架
    'django.contrib.staticfiles',  # 静态文件处理
    'rest_framework',  # Django REST Framework
    'rest_framework.authtoken',  # REST Framework 的认证令牌
    'gerapy.server.core',  # 自定义应用
    'django_apscheduler',  # 定时任务调度
    'corsheaders'  # 跨域资源共享头
]

MIDDLEWARE = [  # 中间件列表
    'django.middleware.security.SecurityMiddleware',  # 安全中间件
    'django.contrib.sessions.middleware.SessionMiddleware',  # 会话中间件
    'corsheaders.middleware.CorsMiddleware',  # 跨域中间件
    'django.middleware.common.CommonMiddleware',  # 常用中间件
    # 'gerapy.server.core.middlewares.TransformMiddleware',  # 自定义中间件（注释掉）
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # 认证中间件
    'django.contrib.messages.middleware.MessageMiddleware',  # 消息中间件
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',  # 防止点击劫持（注释掉）
]

REST_FRAMEWORK = {  # Django REST Framework 的配置
    'DEFAULT_AUTHENTICATION_CLASSES': [  # 默认认证类
        'rest_framework.authentication.TokenAuthentication',  # 令牌认证
    ],
}

ROOT_URLCONF = 'gerapy.server.server.urls'  # URL 配置模块

TEMPLATES = [  # 模板配置
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',  # 使用 Django 模板引擎
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # 模板目录
        'APP_DIRS': True,  # 启用应用目录中的模板
        'OPTIONS': {
            'context_processors': [  # 上下文处理器
                'django.template.context_processors.debug',  # 调试上下文
                'django.template.context_processors.request',  # 请求上下文
                'django.contrib.auth.context_processors.auth',  # 认证上下文
                'django.contrib.messages.context_processors.messages',  # 消息上下文
            ],
        },
    },
]

WSGI_APPLICATION = 'gerapy.server.server.wsgi.application'  # WSGI 应用程序配置

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DB_SUBDIR = 'dbs'  # 数据库子目录
DB_DIR = os.path.join(os.getcwd(), DB_SUBDIR)  # 数据库目录

# Create DB dir if it does not exist
os.path.exists(DB_DIR) or os.makedirs(DB_DIR)  # 如果数据库目录不存在，则创建

DB_PATH = os.path.join(DB_DIR, 'db.sqlite3')  # 数据库文件路径

DATABASES = {  # 数据库配置
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',  # 数据库引擎
        'NAME': DB_PATH,  # 数据库名称
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [  # 密码验证器
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',  # 用户属性相似性验证器
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',  # 最小长度验证器
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',  # 常见密码验证器
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',  # 数字密码验证器
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'  # 默认语言代码

TIME_ZONE = 'Asia/Shanghai'  # 时区设置

USE_I18N = True  # 启用国际化

USE_L10N = True  # 启用本地化

USE_TZ = True  # 启用时区支持

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'  # 静态文件的 URL 前缀

CORS_ORIGIN_ALLOW_ALL = True  # 允许所有来源的跨域请求

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/
X_FRAME_OPTIONS = 'SAMEORIGIN'  # 防止点击劫持，限制同源

STATICFILES_DIRS = (  # 静态文件目录
    os.path.join(BASE_DIR, 'core/templates/static'),  # 自定义静态文件目录
)
